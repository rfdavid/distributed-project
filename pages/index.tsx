import type { NextPage } from 'next';
import { useEffect, useState } from 'react';
import io from 'socket.io-client';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import ImageCanvas from "../components/ImageCanvas";

const Home: NextPage = () => {
  const [socket, setSocket] = useState<SocketIOClient.Socket>();
  const [clients, setClients] = useState<string[]>([]);

  const [message, setMessage] = useState('');
  const [messageQueue, setMessageQueue] = useState<string[]>([]);

  useEffect(() => {
    const newSocket = io('http://localhost:3000');
    setSocket(newSocket);

    newSocket.on('clients', (clientList: string[]) => {
      setClients(clientList);
    });

    newSocket.on('updateQueue', (updatedQueue) => {
      setMessageQueue(updatedQueue);
      console.log('Updated queue:', updatedQueue);

      // find the first available image url (clientProcessorId is null)
      // this must be a loop 
      const firstAvailable = updatedQueue.find(data => data.clientProcessorId === null);
      if (firstAvailable) {
          console.log('Found item with clientProcessorId null:', firstAvailable);
          // try to get the 'lock'
          // lock acquired? process
          // no? find next
          // socket.emit('messageProcessed', { messageId, clientProcessorId });
      }

    });

    return () => newSocket.close();
  }, []);

  const sendMessage = () => {
    socket.emit('newMessage', message);
    setMessage(''); // Clear the textarea
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Distributed Inference Server</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Distributed Inference Server</h1>

        <ImageCanvas width={240} height={240}/>
        <div id="result" className="mt-3">
        </div>

        <div>
          <h2>Connected Clients:</h2>
          <ul>
            {clients.map(client => <li key={client}>{client}</li>)}
          </ul>
        </div>

     <textarea
        value={message}
        onChange={(e) => setMessage(e.target.value)}
      />
      <button onClick={sendMessage}>Send</button>

      <div>
        <h2>Message Queue:</h2>
          {messageQueue.map((msg, index) => (
          <div>
            <p><img src={msg.url} width="250" /></p>
            <p>ID: {msg.id}</p>
            <p>Client Processing: {msg.clientProcessorId}</p>
            <p>Classification: {msg.label}</p>
            <p>Probability: {msg.probability}</p>
            <p>Inference Speed: {msg.inferenceSpeed}</p>
            </div>
          ))}
      </div>


      </main>

      <footer className={styles.footer}>
        <a href="https://onnxruntime.ai/docs" target="_blank" rel="noopener noreferrer"></a>
      </footer>
    </div>
  )
}

export default Home;

